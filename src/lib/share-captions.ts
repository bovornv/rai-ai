// Share Card Captions for RaiAI MVP
// Thai captions grouped by feature for social media sharing

export interface ShareCaption {
  id: string;
  text: string;
  category: 'spray' | 'outbreak' | 'scan' | 'progress' | 'summary' | 'shop';
  emoji?: string;
}

export const shareCaptions = {
  th: {
    spray: [
      {
        id: 'spray_safe',
        text: '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏â‡∏µ‡∏î‡∏û‡πà‡∏ô‡πÑ‡∏î‡πâ ‚úÖ',
        category: 'spray' as const,
        emoji: '‚úÖ'
      },
      {
        id: 'spray_wind',
        text: '‡∏•‡∏°‡πÅ‡∏£‡∏á ‡∏£‡∏∞‡∏ß‡∏±‡∏á! üö´ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏â‡∏µ‡∏î‡∏û‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô',
        category: 'spray' as const,
        emoji: 'üö´'
      },
      {
        id: 'spray_rain',
        text: '‡∏ù‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≤ ‚òî ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏â‡∏µ‡∏î‡∏û‡πà‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
        category: 'spray' as const,
        emoji: '‚òî'
      }
    ],
    outbreak: [
      {
        id: 'outbreak_brown_spot',
        text: '‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 3 ‡∏Å‡∏°. ‡∏£‡∏∞‡∏ß‡∏±‡∏á!',
        category: 'outbreak' as const,
        emoji: 'ü¶†'
      },
      {
        id: 'outbreak_root_rot',
        text: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏ß‡∏ô‡∏Ñ‡∏∏‡∏ì',
        category: 'outbreak' as const,
        emoji: '‚ö†Ô∏è'
      },
      {
        id: 'outbreak_neighbor',
        text: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î ‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏±‡∏ô!',
        category: 'outbreak' as const,
        emoji: 'üì¢'
      }
    ],
    scan: [
      {
        id: 'scan_leaf_blight',
        text: '‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡πÑ‡∏´‡∏°‡πâ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß ‡∏£‡∏µ‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏∏‡∏Å‡∏•‡∏≤‡∏°',
        category: 'scan' as const,
        emoji: 'üîç'
      },
      {
        id: 'scan_durian_rot',
        text: '‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
        category: 'scan' as const,
        emoji: 'üå≥'
      },
      {
        id: 'scan_uncertain',
        text: '‡∏ú‡∏•‡∏™‡πÅ‡∏Å‡∏ô: ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏£‡∏≠ 2 ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
        category: 'scan' as const,
        emoji: '‚ùì'
      }
    ],
    progress: [
      {
        id: 'progress_rice_improved',
        text: '‡πÉ‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏Ñ 3 ‚Üí 1 ‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß üí™',
        category: 'progress' as const,
        emoji: 'üí™'
      },
      {
        id: 'progress_durian_better',
        text: '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ üéâ',
        category: 'progress' as const,
        emoji: 'üéâ'
      },
      {
        id: 'progress_field_health',
        text: '‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á! ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏õ‡∏•‡∏á‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
        category: 'progress' as const,
        emoji: '‚ú®'
      }
    ],
    summary: [
      {
        id: 'summary_savings',
        text: '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ ‡∏ø180/‡πÑ‡∏£‡πà üíµ',
        category: 'summary' as const,
        emoji: 'üíµ'
      },
      {
        id: 'summary_report',
        text: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏£‡πà: ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏õ‡∏•‡∏á‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô + ‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏•‡∏î‡∏•‡∏á',
        category: 'summary' as const,
        emoji: 'üìä'
      },
      {
        id: 'summary_results',
        text: '‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: ‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ‡∏ú‡∏•!',
        category: 'summary' as const,
        emoji: 'üèÜ'
      }
    ],
    shop: [
      {
        id: 'shop_qr',
        text: '‡πÉ‡∏ä‡πâ QR ‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ',
        category: 'shop' as const,
        emoji: 'üì±'
      },
      {
        id: 'shop_ticket',
        text: '‡∏ï‡∏±‡πã‡∏ß‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤: ‡∏ö‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°',
        category: 'shop' as const,
        emoji: 'üé´'
      },
      {
        id: 'shop_scan',
        text: '‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢',
        category: 'shop' as const,
        emoji: 'üõí'
      }
    ]
  },
  en: {
    spray: [
      {
        id: 'spray_safe',
        text: 'Safe to spray today ‚úÖ',
        category: 'spray' as const,
        emoji: '‚úÖ'
      },
      {
        id: 'spray_wind',
        text: 'Strong wind warning! üö´ Delay spraying',
        category: 'spray' as const,
        emoji: 'üö´'
      },
      {
        id: 'spray_rain',
        text: 'Rain coming ‚òî Avoid spraying today',
        category: 'spray' as const,
        emoji: '‚òî'
      }
    ],
    outbreak: [
      {
        id: 'outbreak_brown_spot',
        text: 'Brown spot disease outbreak within 3km radius. Be careful!',
        category: 'outbreak' as const,
        emoji: 'ü¶†'
      },
      {
        id: 'outbreak_root_rot',
        text: 'Alert! Root rot found in durian near your farm',
        category: 'outbreak' as const,
        emoji: '‚ö†Ô∏è'
      },
      {
        id: 'outbreak_neighbor',
        text: 'Neighbor reports outbreak. Share to keep everyone informed!',
        category: 'outbreak' as const,
        emoji: 'üì¢'
      }
    ],
    scan: [
      {
        id: 'scan_leaf_blight',
        text: 'Detected rice leaf blight. Act quickly before it spreads',
        category: 'scan' as const,
        emoji: 'üîç'
      },
      {
        id: 'scan_durian_rot',
        text: 'Durian tree shows root rot symptoms. Prevention tips provided',
        category: 'scan' as const,
        emoji: 'üå≥'
      },
      {
        id: 'scan_uncertain',
        text: 'Scan result: Symptoms unclear. Wait 2 days and try again',
        category: 'scan' as const,
        emoji: '‚ùì'
      }
    ],
    progress: [
      {
        id: 'progress_rice_improved',
        text: 'Rice leaves: disease 3 ‚Üí 1 in 3 days. Getting better üí™',
        category: 'progress' as const,
        emoji: 'üí™'
      },
      {
        id: 'progress_durian_better',
        text: 'Durian symptoms improved after following advice üéâ',
        category: 'progress' as const,
        emoji: 'üéâ'
      },
      {
        id: 'progress_field_health',
        text: 'Real results! Field health improved with recommendations',
        category: 'progress' as const,
        emoji: '‚ú®'
      }
    ],
    summary: [
      {
        id: 'summary_savings',
        text: 'This month saved ‡∏ø180/rai in costs üíµ',
        category: 'summary' as const,
        emoji: 'üíµ'
      },
      {
        id: 'summary_report',
        text: 'Farm report: Field health improved + costs reduced',
        category: 'summary' as const,
        emoji: 'üìä'
      },
      {
        id: 'summary_results',
        text: 'Monthly summary: Following the plan works!',
        category: 'summary' as const,
        emoji: 'üèÜ'
      }
    ],
    shop: [
      {
        id: 'shop_qr',
        text: 'Use this QR at nearby shop for disease-specific advice',
        category: 'shop' as const,
        emoji: 'üì±'
      },
      {
        id: 'shop_ticket',
        text: 'Shop ticket: Shows recommended product types',
        category: 'shop' as const,
        emoji: 'üé´'
      },
      {
        id: 'shop_scan',
        text: 'Share with shop to scan and get products instantly',
        category: 'shop' as const,
        emoji: 'üõí'
      }
    ]
  }
};

// Helper functions for caption management
export const getRandomCaption = (category: keyof typeof shareCaptions.th, language: 'th' | 'en' = 'th'): ShareCaption => {
  const captions = shareCaptions[language][category];
  const randomIndex = Math.floor(Math.random() * captions.length);
  return captions[randomIndex];
};

export const getAllCaptionsByCategory = (category: keyof typeof shareCaptions.th, language: 'th' | 'en' = 'th'): ShareCaption[] => {
  return shareCaptions[language][category];
};

export const getCaptionById = (id: string, language: 'th' | 'en' = 'th'): ShareCaption | undefined => {
  for (const category of Object.keys(shareCaptions[language]) as Array<keyof typeof shareCaptions.th>) {
    const caption = shareCaptions[language][category].find(c => c.id === id);
    if (caption) return caption;
  }
  return undefined;
};

// Branding footer for share cards
export const getShareFooter = (language: 'th' | 'en' = 'th'): string => {
  return language === 'th' ? '‡πÅ‡∏ä‡∏£‡πå‡∏à‡∏≤‡∏Å RaiAI' : 'Shared from RaiAI';
};
